<?php

/**
 * @file
 * Add a field to nodes containing the publication date.
 */

/**
 * Define the value stored in the database when a node is unpublished and no
 * publication date has been set. We use the largest number that the database
 * field can hold so unpublished nodes will appear newer than published nodes
 * when sorted by publication date.
 *
 * @note: This is going to trigger the Year 2038 problem.
 */
define('PUBLICATION_DATE_DEFAULT', 2147483647);

/**
 * Implements hook_entity_base_field_info().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *
 * @return array
 */
function publication_date_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'node') {
    $fields['published_at'] = \Drupal\Core\Field\BaseFieldDefinition::create('published_at')
      ->setLabel(t('Publication date'))
      ->setDescription(t('Keep the publication timestamp for each node.'));
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * @param \Drupal\node\NodeInterface $node
 */
function publication_date_node_presave(\Drupal\node\NodeInterface $node) {
  // If a publication date has already been set then retain it.
  if (!empty($node->published_at->value)) {
    $published_at = $node->published_at->value;
  }
  // Otherwise, if no publication date has been set and the node is published
  // then set the publication date to REQUEST_TIME.
  elseif ($node->isPublished()) {
    $published_at = REQUEST_TIME;
  }
  // Otherwise, if no publication date has been set and the node is unpublished
  // then store the default publication date.
  else {
    $published_at = PUBLICATION_DATE_DEFAULT;
  }

  // Allow other modules to alter the publication date before it is saved.
  $data = [
    'published_at' => $published_at,
    'node' => $node,
    'op' => $node->isNew() ? 'insert' : 'update'
  ];
  \Drupal::moduleHandler()->alter('publication_date', $data);

  // Update the node object.
  $node->set('published_at', $published_at);
}

/**
 * Implements hook_views_api().
 */
function publication_date_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'publication_date') . '/includes',
  );
}

/**
 * Implements hook_form_BASE_ID_alter().
 *
 * Display the publication date on the node edit form.
 * @note: This won't work where you have Display Suite/REL enabled.
 */
function publication_date_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form["#node"];

  // If this is an existing node then get the currently set publication date.
  $published_at = ($form['nid'] == NULL || empty($node->published_at)) ? NULL : $node->published_at;

  // Check if the user has permission to edit the publication date.
  $pubdate_access = user_access('set any published on date') || user_access('set ' . $node->type . ' published on date');

  // Set a date/time format to use in the "Published on" text field.
  $date_format = 'Y-m-d H:i:s O';

  // Use the popup date picker provided by the Date module, if it is enabled and
  // the user has access to edit the publication date.
  if ($pubdate_access && module_exists('date_popup') && variable_get('publication_date_popup_enable', 1)) {
    // The date popup field requires a date format without the timezone.
    $date_format = 'Y-m-d H:i:s';
    $form['options']['pubdate'] = array(
      '#type' => 'date_popup',
      '#title' => t('Published on'),
      '#description' => t('Leave blank to use the time of form submission.'),
      '#date_type' => DATE_UNIX,
      '#date_timezone' => date_default_timezone(),
      '#date_format' => $date_format,
      '#date_increment' => 1,
      '#date_year_range' => '-' . variable_get('publication_date_popup_year_start', '6') . ':+' . variable_get('publication_date_popup_year_end', '1'),
      '#weight' => -1,
      '#access' => TRUE,
    );
  }
  // Falback to a standard text field.
  else {
    $form['options']['pubdate'] = array(
      '#type' => 'textfield',
      '#title' => t('Published on'),
      '#maxlength' => 25,
      '#description' => t('Format: %time. Leave blank to use the time of form submission.', array('%time' => format_date(REQUEST_TIME, 'custom', $date_format))),
      '#weight' => -1,
      '#access' => $pubdate_access,
    );
  }

  // If there is an existing publication date, set it as the default value.
  $form['options']['pubdate']['#default_value'] = empty($published_at) ? '' : format_date($published_at, 'custom', $date_format);

  // If the user can access pubdate, we need to make sure they also have access
  // to the options group.
  if ($pubdate_access && $form['options']['#access'] == FALSE) {
    $form['options']['#access'] = TRUE;
    // Check all fields in the options group and, if access has not been set,
    // set it to FALSE. We don't want to grant access to any extra fields.
    $children = element_children($form['options']);
    foreach ($children as $key => $value) {
      if (!isset($form['options'][$value]['#access'])){
        $form['options'][$value]['#access'] = FALSE;
      }
    }
  }

  // Add custom validation and submit handlers.
  $form['#validate'][] = 'publication_date_pubdate_validate';
  $form['#submit'][] = 'publication_date_pubdate_submit';
}

/**
 * Node edit form validation handler.
 *
 * Validate the published date input.
 */
function publication_date_pubdate_validate($form, &$form_state) {
  // Validate the "Published on" field. As of PHP 5.1.0, strtotime returns FALSE
  // instead of -1 upon failure.
  if (!empty($form_state['values']['pubdate']) && strtotime($form_state['values']['pubdate']) <= 0) {
    form_set_error('pubdate', t('You have to specify a valid date for the published on field.'));
  }
}

/**
 * Node edit form submit handler.
 *
 * Convert the published date to Epoch time for other hook implementations to
 * deal with.
 */
function publication_date_pubdate_submit($form, &$form_state) {
  // Set $node->published_at to the publication date field value if it was set,
  // or NULL if it was not.
  $form_state['node']->published_at = empty($form_state['values']['pubdate']) ? NULL : strtotime(($form_state['values']['pubdate']));
}

/**
 * Implements hook_clone_node_alter().
 *
 * Reset the publication date when a node is cloned using the Node Clone module.
 *
 * @see clone.api.php
 */
function publication_date_clone_node_alter(&$node, $context) {
  $node->published_at->value = NULL;
}

/**
 * Implements hook_menu().
 */
function publication_date_menu() {
  $items['admin/config/content/publication-date'] = array(
    'title' => 'Publication date',
    'description' => 'Configure publication date settings when using the date popup module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publication_date_admin_form'),
    'access arguments' => array('administer publication date'),
    'file' => 'includes/publication_date.admin.inc',
  );

  return $items;
}
